{"version":3,"sources":["data/companies.js","business-and-trade-2.svg","GJMap.jsx","Table.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["startingPoint","markerHtmlStyles","color","icon","companyMarker","DivIcon","iconUrl","html","className","GJMap","markers","features","markerData","highlightIdx","style","MapContainer","center","zoom","SGAreas","map","feature","GeoJSON","data","properties","Name","marker","Marker","id","position","latitude","longitude","_companies","i","push","companyName","faker","company","timeZone","address","country","city","streetAddress","companies","Table","tableData","setHighlightIdx","rowItem","onMouseEnter","data-label","App","useState","console","log","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0HAIA,I,wFCJe,MAA0B,iD,eCQnCA,EAAgB,CAAC,QAAS,YAK1BC,EAAmB,SAACC,GAAD,oCACLC,EADK,kCAEHD,EAFG,iNAanBE,EAAgB,SAACF,GAAD,OACpB,IAAIG,UAAQ,CACVC,QAASH,EAETI,KAAK,gBAAD,OAAkBN,EAAiBC,GAAnC,QACJM,UAAW,MAoCAC,EA3BD,SAAC,GAAoD,IAC1CC,EAPFC,EAMNC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAON,EAAgB,EAAhBA,UAchD,OACE,eAACO,EAAA,EAAD,CACED,MAAOA,EACPN,UAAWA,EACXQ,OAAQhB,EACRiB,KApDO,EAgDT,WArBmBN,EA2BFO,EAAQP,SA1BpBA,EAASQ,KAAI,SAACC,GAAD,OAClB,cAACC,EAAA,EAAD,CAAuCC,KAAMF,GAA/BA,EAAQG,WAAWC,WAKZd,EAqBJE,EApBVF,EAAQS,KAAI,SAACM,GAAD,OACjB,cAACC,EAAA,EAAD,CAEEvB,KACEsB,EAAOE,KAAOd,EACVT,EApCW,WAqCXA,EAtCa,WAwCnBwB,SAAU,CAACH,EAAOI,SAAUJ,EAAOK,YAN9BL,EAAOE,Y,gBF1ChBI,EAAa,GAERC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAWE,KAAK,CACdN,GAAIK,EACJE,YAAaC,IAAMC,QAAQF,cAC3BG,SAAUF,IAAMG,QAAQD,WACxBE,QAASJ,IAAMG,QAAQC,UACvBC,KAAML,IAAMG,QAAQE,OACpBC,cAAeN,IAAMG,QAAQG,gBAC7BZ,SAAUM,IAAMG,QAAQT,WACxBC,UAAWK,IAAMG,QAAQR,cAItB,IAAMY,EAAYX,EGUVY,EA3BD,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,gBAAiBrC,EAAgB,EAAhBA,UAC3C,OACE,wBAAOA,UAAS,sCAAiCA,GAAjD,UACE,gCACE,+BACE,yCACA,0CACA,yCACA,+CAGJ,gCACGoC,EAAUzB,KAAI,SAAC2B,GAAD,OACb,qBAAqBC,aAAc,kBAAMF,EAAgBC,EAAQnB,KAAjE,UACE,oBAAIqB,aAAW,UAAf,SAA0BF,EAAQZ,cAClC,qBAAIc,aAAW,WAAf,UACGF,EAAQN,KADX,KACmBM,EAAQP,WAE3B,oBAAIS,aAAW,UAAf,SAA0BF,EAAQL,gBAClC,oBAAIO,aAAW,WAAf,SAA2BF,EAAQT,aAN5BS,EAAQnB,aCRdsB,EAAM,WAAO,IAAD,EACiBC,oBAAU,GAD3B,mBAChBrC,EADgB,KACFgC,EADE,KAGvB,OADAM,QAAQC,IAAIV,GAEV,sBAAKlC,UAAU,4CAAf,UACE,cAAC,EAAD,CACEA,UAAU,QACVM,MAAO,CAAEuC,OAAQ,SACjBzC,WAAY8B,EACZ7B,aAAcA,IAEhB,cAAC,EAAD,CACEL,UAAU,WACVoC,UAAWF,EACXG,gBAAiBA,QCPVS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6f9578bd.chunk.js","sourcesContent":["import faker from \"faker\";\n\nlet _companies = [];\n\nfor (let i = 0; i < 30; i++) {\n  _companies.push({\n    id: i,\n    companyName: faker.company.companyName(),\n    timeZone: faker.address.timeZone(),\n    country: faker.address.country(),\n    city: faker.address.city(),\n    streetAddress: faker.address.streetAddress(),\n    latitude: faker.address.latitude(),\n    longitude: faker.address.longitude(),\n  });\n}\n\nexport const companies = _companies;\n","export default __webpack_public_path__ + \"static/media/business-and-trade-2.17105eab.svg\";","// Button to try programmatically highlight marker\nimport { GeoJSON, MapContainer, Marker } from \"react-leaflet\";\nimport { Icon, DivIcon } from \"leaflet\";\nimport icon from \"./business-and-trade-2.svg\";\nimport SGAreas from \"./sgareas.json\";\nimport React, { useState } from \"react\";\n\nconst zoom = 1;\nconst startingPoint = [1.35811, 103.835067];\n\nconst markerDefaultColor = \"#62B220\";\nconst markerFocusColor = \"#FF69B4\";\n\nconst markerHtmlStyles = (color) => `\n  background-url: ${icon};\n  background-color: ${color};\n  width: 1.5rem;\n  height: 1.5rem;\n  display: block;\n  left: -1.5rem;\n  top: -1.5rem;\n  position: relative;\n  border-radius: 3rem 3rem 0;\n  transform: rotate(45deg);\n  border: 1px solid #FFFFFF`;\n\nconst companyMarker = (color) =>\n  new DivIcon({\n    iconUrl: icon,\n    // iconSize: [18, 18],\n    html: `<span style=\"${markerHtmlStyles(color)}\" />`,\n    className: \"\",\n  });\n\nconst renderGeoJson = (features) => {\n  return features.map((feature) => (\n    <GeoJSON key={feature.properties.Name} data={feature} />\n  ));\n};\n\nconst GJMap = ({ markerData, highlightIdx, style, className }) => {\n  const renderMarkers = (markers) => {\n    return markers.map((marker) => (\n      <Marker\n        key={marker.id}\n        icon={\n          marker.id === highlightIdx\n            ? companyMarker(markerFocusColor)\n            : companyMarker(markerDefaultColor)\n        }\n        position={[marker.latitude, marker.longitude]}\n      />\n    ));\n  };\n  return (\n    <MapContainer\n      style={style}\n      className={className}\n      center={startingPoint}\n      zoom={zoom}\n    >\n      {renderGeoJson(SGAreas.features)}\n      {renderMarkers(markerData)}\n    </MapContainer>\n  );\n};\n\nexport default GJMap;\n","const Table = ({ tableData, setHighlightIdx, className }) => {\n  return (\n    <table className={`ui table selectable pointer ${className}`}>\n      <thead>\n        <tr>\n          <th>Company</th>\n          <th>Location</th>\n          <th>Address</th>\n          <th>Timezone</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tableData.map((rowItem) => (\n          <tr key={rowItem.id} onMouseEnter={() => setHighlightIdx(rowItem.id)}>\n            <td data-label=\"Company\">{rowItem.companyName}</td>\n            <td data-label=\"Location\">\n              {rowItem.city}, {rowItem.country}\n            </td>\n            <td data-label=\"Address\">{rowItem.streetAddress}</td>\n            <td data-label=\"Timezone\">{rowItem.timeZone}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import GJMap from \"./GJMap\";\nimport { companies } from \"./data\";\nimport Table from \"./Table\";\nimport React, { useState } from \"react\";\n\nexport const App = () => {\n  const [highlightIdx, setHighlightIdx] = useState(-1);\n  console.log(companies);\n  return (\n    <div className=\"debug-grid overflow-hidden root-container\">\n      <GJMap\n        className=\"GJMap\"\n        style={{ height: \"100vh\" }}\n        markerData={companies}\n        highlightIdx={highlightIdx}\n      />\n      <Table\n        className=\"my-table\"\n        tableData={companies}\n        setHighlightIdx={setHighlightIdx}\n      />\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}